# Queries
from queries import insert_draft, user_has_draft, delete_draft, get_draft

# Helpers
from utils.helpers import format_text

# Misc
import random
import json

# Corpus
from corpus.ok import text as ok_text


async def process_ads_command(chat, match, logger):
    info = format_text('''
    {name}, —ç—ä–ª–æ–Ω –±–µ—Ä–º–æ“õ—á–∏–º–∏—Å–∏–∑ —ë–∫–∏ —ç—ä–ª–æ–Ω–ª–∞—Ä–Ω–∏ –∫—û—Ä–º–æ“õ—á–∏–º–∏—Å–∏–∑?
    ''')
    keyboard = [
        ['–≠—ä–ª–æ–Ω –±–µ—Ä–º–æ“õ—á–∏–º–∞–Ω', '–≠—ä–ª–æ–Ω–ª–∞—Ä–Ω–∏ –∫—û—Ä–º–æ“õ—á–∏–º–∞–Ω'],
        ['–ú–µ–Ω—é–≥–∞ “õ–∞–π—Ç–∏—à'],
    ]
    reply_keyboard_markup = {
        'keyboard': keyboard,
        'resize_keyboard': True,
        'one_time_keyboard': True
    }

    logger.info('%s ads requested by', chat.sender)
    await chat.send_text(
        info.format(name=chat.sender['first_name']),
        parse_mode='Markdown',
        disable_web_page_preview=True,
        reply_markup=json.dumps(reply_keyboard_markup))


async def create_ad_command(chat, match, logger):
    question = format_text('''
    {ok} “ö–∞–Ω–¥–∞–π —ç—ä–ª–æ–Ω –±–µ—Ä–º–æ“õ—á–∏—Å–∏–∑?
    ''')
    keyboard = [
        ['–°–æ—Ç–º–æ“õ—á–∏–º–∞–Ω', '–û–ª–º–æ“õ—á–∏–º–∞–Ω'],
        ['–•–∏–∑–º–∞—Ç –≤–∞ —Ç–∞–∫–ª–∏—Ñ–ª–∞—Ä'],
    ]
    reply_keyboard_markup = {
        'keyboard': keyboard,
        'resize_keyboard': True,
        'one_time_keyboard': True
    }

    logger.info('%s ads requested by', chat.sender)
    await chat.send_text(
        question.format(ok=random.choice(ok_text)),
        parse_mode='Markdown',
        disable_web_page_preview=True,
        reply_markup=json.dumps(reply_keyboard_markup))


async def create_sale_ad_command(chat, match, logger):
    question = format_text('''
    –ù–∏–º–∞ —Å–æ—Ç–º–æ“õ—á–∏—Å–∏–∑?
    ''')
    keyboard = [
        ['üöó –ê–≤—Ç–æ-—É–ª–æ–≤', 'üè† –ö—û—á–º–∞—Å-–º—É–ª–∫'],
        ['üì∫ –ú–∞–∏—à–∏–π —Ç–µ—Ö–Ω–∏–∫–∞', 'üö™ –£–π-—Ä—û–∑“ì–æ—Ä –±—É—é–º–ª–∞—Ä–∏'],
        ['üëï –ö–∏–π–∏–º-–∫–µ—á–∞–∫', 'üö¥ –°–ø–æ—Ä—Ç –∞–Ω–∂–æ–º–ª–∞—Ä–∏'],
        ['üì± –¢–µ–ª–µ—Ñ–æ–Ω', ''],
    ]
    reply_keyboard_markup = {
        'keyboard': keyboard,
        'resize_keyboard': True,
        'one_time_keyboard': True
    }

    logger.info('%s ads requested by', chat.sender)
    await chat.send_text(
        question,
        parse_mode='Markdown',
        disable_web_page_preview=True,
        reply_markup=json.dumps(reply_keyboard_markup))


async def create_sale_ad_vehicle_command(chat, match, logger):

    if await user_has_draft(chat.bot.pg_pool, chat.sender.get('id')):

        denied = format_text('''
        {name}, –∞–≤—Ç–æ-—É–ª–æ–≤ “≥–∞“õ–∏–¥–∞ —ç—ä–ª–æ–Ω –±–µ—Ä–≥–∞–Ω–¥–∏–∑.
        –£ —ç—ä–ª–æ–Ω “≥–∞–ª–∏ –∫–∞–Ω–∞–ª–≥–∞ “õ—û–π–∏–ª–≥–∞–Ω–∏ –π—û“õ.

        –£ —ç—ä–ª–æ–Ω–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∞–π–ª–∏–∫–º–∏?
        ''')

        keyboard = [
            ['–≠—ä–ª–æ–Ω–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏—à'],
            ['–ú–µ–Ω—é–≥–∞ “õ–∞–π—Ç–∏—à'],
        ]
        reply_keyboard_markup = {
            'keyboard': keyboard,
            'resize_keyboard': True,
            'one_time_keyboard': True
        }

        await chat.send_text(
            denied.format(name=chat.sender['first_name']),
            parse_mode='Markdown',
            disable_web_page_preview=True,
            reply_markup=json.dumps(reply_keyboard_markup))
        return

    question = format_text('''
    –ê–≤—Ç–æ-—É–ª–æ–≤ “≥–∞“õ–∏–¥–∞ “õ–∏—Å“õ–∞ –º–∞—ä–ª—É–º–æ—Ç –±–µ—Ä–∏–Ω–≥.
    
    –≠—ä–ª–æ–Ω–Ω–∏ –±—É–Ω–¥–∞–π —Ñ–æ—Ä–º–∞—Ç–¥–∞ –≤–µ—Ä–≥—É–ª –±–∏–ª–∞–Ω –∞–∂—Ä–∞—Ç–∏–± —ë–∑–∏–Ω–≥:
    ```
    –ê–≤—Ç–æ: –ù–æ–º–∏, –π–∏–ª–∏, –ø—Ä–æ–±–µ–≥, “≥–æ–ª–∞—Ç–∏, –Ω–∞—Ä—Ö–∏, —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º
    ```
    –ú–∞—Å–∞–ª–∞–Ω:
    ```
    –ê–≤—Ç–æ: Lacetti, 2015, 35000, —è—Ö—à–∏, 7000, +998931234567
    ```

    –ë–æ—à–∏–≥–∞ `–ê–≤—Ç–æ:` —Å—û–∑–∏–Ω–∏ “õ—û—à–∏—à —ç—Å–¥–∞–Ω —á–∏“õ–º–∞—Å–∏–Ω.
    ''')

    logger.info('Vehicle create ad requested by %s', chat.sender)
    await chat.send_text(
        question,
        parse_mode='Markdown',
        disable_web_page_preview=True)


async def cancel_ad_command(chat, match, logger):

    if not await user_has_draft(chat.bot.pg_pool, chat.sender.get('id')):

        message = format_text('''
        {name}, “≥–∞–ª–∏ —è–Ω–≥–∏ —ç—ä–ª–æ–Ω —ë–∑–≥–∞–Ω–∏–Ω–≥–∏–∑ –π—û“õ.
        ''')
        await chat.send_text(
            message.format(name=chat.sender['first_name']),
            parse_mode='Markdown',
            disable_web_page_preview=True)
        return

    await delete_draft(chat.bot.pg_pool, chat.sender.get('id'))
    message = format_text('''
    –≠—ä–ª–æ–Ω –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏.
    ''')
    await chat.send_text(message)
    await create_sale_ad_vehicle_command(chat, match, logger)


async def create_sale_ad_vehicle_accept_command(chat, match, logger):
    logger.info('Vehicle create ad requested by %s', chat.sender)

    if await user_has_draft(chat.bot.pg_pool, chat.sender.get('id')):

        denied = format_text('''
        {name}, –∞–≤—Ç–æ-—É–ª–æ–≤ “≥–∞“õ–∏–¥–∞ —ç—ä–ª–æ–Ω –±–µ—Ä–≥–∞–Ω–¥–∏–∑.
        –£ —ç—ä–ª–æ–Ω “≥–∞–ª–∏ –∫–∞–Ω–∞–ª–≥–∞ “õ—û–π–∏–ª–≥–∞–Ω–∏ –π—û“õ.

        –£ —ç—ä–ª–æ–Ω–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∞–π–ª–∏–∫–º–∏?
        ''')

        keyboard = [
            ['–≠—ä–ª–æ–Ω–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏—à'],
            ['–ú–µ–Ω—é–≥–∞ “õ–∞–π—Ç–∏—à'],
        ]
        reply_keyboard_markup = {
            'keyboard': keyboard,
            'resize_keyboard': True,
            'one_time_keyboard': True
        }

        await chat.send_text(
            denied.format(name=chat.sender['first_name']),
            parse_mode='Markdown',
            disable_web_page_preview=True,
            reply_markup=json.dumps(reply_keyboard_markup))
        return

    text = chat.message['text']
    keys = ['name', 'year', 'mileage', 'status', 'price', 'contact']
    __, values = text.split(':')
    values = [v.strip() for v in values.split(',')]
    ad_dict = dict(zip(keys, values))
    logger.info('----------------------')
    logger.info(ad_dict)
    logger.info('Inserting draft ...')
    await insert_draft(chat.bot.pg_pool, chat.sender['id'], ad_dict)
    ad_template = format_text('''
    üöó *{name}* —Å–æ—Ç–∏–ª–∞–¥–∏!
    ‚öôÔ∏è  *–ô–∏–ª–∏:* {year}
    üèÉ *–ü—Ä–æ–±–µ–≥:* {mileage}
    üî¶ *“≤–æ–ª–∞—Ç–∏:* {status}
    üí∞ *–ù–∞—Ä—Ö–∏:* {price}
    üìû *–ú—É—Ä–æ–∂–∞–∞—Ç —É—á—É–Ω:* /contact

    [–í–æ–¥–∏–π –±–æ–∑–æ—Ä](https://t.me/vodiybozor)
    ''')
    ad_text = ad_template.format(**ad_dict)
    await chat.send_text(
        ad_text,
        parse_mode='Markdown',
        disable_web_page_preview=True)

    question = format_text('''
    –≠—ä–ª–æ–Ω —ë–∑–∏–± –æ–ª–∏–Ω–¥–∏.

    –†–∞—Å–º–∏ –±–æ—Ä–º–∏ –π—û“õ–º–∏?
    ''')
    keyboard = [
        ['‚úÖ –†–∞—Å–º –±–æ—Ä', '‚ùå –†–∞—Å–º –π—û“õ'],
    ]
    reply_keyboard_markup = {
        'keyboard': keyboard,
        'resize_keyboard': True,
        'one_time_keyboard': True
    }

    logger.info('Vehicle ad accepted from %s', chat.sender)
    await chat.send_text(
        question,
        parse_mode='Markdown',
        disable_web_page_preview=True,
        reply_markup=json.dumps(reply_keyboard_markup))


async def attach_image_to_ad_command(chat, match, logger):
    ask_image = format_text('''
    –Æ–±–æ—Ä–∏–Ω–≥ —Ä–∞—Å–º–Ω–∏.
    ''')
    logger.info('Image file sent by %s', chat.sender)
    await chat.send_text(ask_image)


async def attach_no_image_to_ad_command(chat, match, logger):
    text = format_text('''
    {ok}
    ''')
    logger.info('%s says no image', chat.sender)
    await chat.send_text(text.format(ok=random.choice(ok_text)))
    admins = await get_all_admins(chat.bot.pg_pool)
    await chat.send_text('%d —Ç–∞ —Ö–∞–±–∞—Ä —é–±–æ—Ä–∞–º–∞–Ω.' % len(users))

    import time
    start = time.time()

    for user in users:
        logger.info('Sending to %s (%s)', user['first_name'], user['username'])

        ad_template = format_text('''
        üöó *{name}* —Å–æ—Ç–∏–ª–∞–¥–∏!
        ‚öôÔ∏è  *–ô–∏–ª–∏:* {year}
        üèÉ *–ü—Ä–æ–±–µ–≥:* {mileage}
        üî¶ *“≤–æ–ª–∞—Ç–∏:* {status}
        üí∞ *–ù–∞—Ä—Ö–∏:* {price}
        üìû *–ú—É—Ä–æ–∂–∞–∞—Ç —É—á—É–Ω:* /contact

        [–í–æ–¥–∏–π –±–æ–∑–æ—Ä](https://t.me/vodiybozor)
        ''')
        draft = await get_draft(chat.bot.pg_pool, chat.sender.get('id'))
        ad_text = ad_template.format(**draft)

        private = chat.bot.private(user['id'])
        await private.send_text(
            ad_text,
            parse_mode='Markdown',
            disable_web_page_preview=True)

    logger.info('{0:0.4f} time spent to broadcast message to {1} users'.format((time.time() - start), len(users)))
    await send_ad_acceptance_message(chat, match, logger)

async def send_ad_acceptance_message(chat, match, logger):
    accepted_text = format_text('''
    –≠—ä–ª–æ–Ω “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏ –≤–∞ –∞–¥–º–∏–Ω–ª–∞—Ä–≥–∞ —é–±–æ—Ä–∏–ª–¥–∏.
    –¢–µ–∑ –æ—Ä–∞–¥–∞ –∫–∞–Ω–∞–ª–≥–∞ —á–æ–ø —ç—Ç–∏–±, –±—É “≥–∞“õ–¥–∞ —Å–∏–∑–≥–∞ —Ö–∞–±–∞—Ä –±–µ—Ä–∞–º–∏–∑.
    ''')
    await chat.send_text(accepted_text)
